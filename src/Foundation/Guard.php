<?php
declare (strict_types=1);

namespace Intoy\HebatFactory\Foundation;

use Exception;
use Intoy\HebatFactory\Interfaces\SessionInterface;

class Guard 
{
    /**
     * Prefix for CSRF parameters (omit trailing "_" underscore)
     *
     * @var string
     */
    protected $prefix;


    /**
     * CSRF Strength
     *
     * @var int
     */
    protected $strength;


    /**
     * @var SessionInterface
     */
    protected $session;


    /**
     * Stores the latest key-pair generated by the class
     *
     * @var array|null
     */
    protected $keyPair = null;


    public function __construct(SessionInterface $session, string $prefix = 'csrf',int $strength = 16)
    {
        $this->session=$session;
        $this->prefix = rtrim($prefix, '_');
        $this->strength = $strength;        
    }


    /**
     * @return string
     *
     * @throws Exception
     */
    protected function createToken(): string
    {
        return bin2hex(random_bytes($this->strength));
    }



    /**
     * @return array
     *
     * @throws Exception
     */
    public function generateToken(): array
    {
        // Generate new CSRF token
        $name = uniqid($this->prefix);
        $value = $this->createToken();
        $this->saveTokenToStorage($name, $value);


        $this->keyPair = [
            $this->getTokenNameKey() => $name,
            $this->getTokenValueKey() => $value
        ];

        return $this->keyPair;
    }


    /**
     * @param  string $name  CSRF token name
     * @param  string $value CSRF token value
     *
     * @return void
     */
    protected function saveTokenToStorage(string $name, string $value): void
    {
        $this->session->set($name,$value);
    }


    /**
     * @return string
     */
    public function getTokenName(): ?string
    {
        return $this->keyPair[$this->getTokenNameKey()] ?? null;
    }


    /**
     * @return string
     */
    public function getTokenValue(): ?string
    {
        return $this->keyPair[$this->getTokenValueKey()] ?? null;
    }


    /**
     * @return string
     */
    public function getTokenNameKey(): string
    {
        return $this->prefix . '_name';
    }


    /**
     * @return string
     */
    public function getTokenValueKey(): string
    {
        return $this->prefix . '_value';
    }



    /**
     * Validate CSRF token from current request against token value
     * stored in $_SESSION or user provided storage
     *
     * @param  string $name  CSRF name
     * @param  string $value CSRF token value
     *
     * @return bool
     */
    public function validateToken(string $name, string $value): bool
    {
        if (!$this->session->has($name)) {
            return false;
        }

        $token = $this->session->get($name);

        if (function_exists('hash_equals')) {
            return hash_equals($token, $value);
        }

        return $token === $value;
    }


    /**
     * Remove token from storage
     *
     * @param  string $name CSRF token name
     */
    public function removeTokenFromStorage(string $name): void
    {
        $this->session->remove($name);
    }
}